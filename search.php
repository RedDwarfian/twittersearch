<?php 
require_once("./plugins/codebird-php/src/codebird.php");

error_reporting(E_ALL);

\Codebird\Codebird::setConsumerKey('9F6F9ODeKC7VLm0DsBQdMDfVk', 'LthqblJrNy9HD8wI8fGfR94voarXPgaZTKsYrNuTaxaeOGrhtr');

$codebirdie = \Codebird\Codebird::getInstance();

// Setting the token for the RedDwarfian Twitter user.
$codebirdie->setToken('384876244-LEg8Tn4cSRRwOCKaqih0Cx7mXOrCJRAM1noLTJq4','jOfalCOhoxXqWfFrT0ErTIaU05UCVbETfq19t22ECFxg1');

// Bearer Token for this particular app generated by this code:
// $codebirdie->oauth2_token()->access_token;
// 
// If this were to be deployed to multiple computers/clients, 
// I would generate a unique instance and store it in either the session, 
// or in the backend MySQL database.  
\Codebird\Codebird::setBearerToken('AAAAAAAAAAAAAAAAAAAAACZwzgAAAAAAPaIIrQK8a5lTjiMsAaaDM2EKaCg');

// Running the search.

$username  = urlencode($_POST['username']);
$keyword   = urlencode($_POST['keyword']);
$testtype  = $_POST['testtype']; // This is if we're running unit tests.
$number    = intval($_POST['number']);
$latitude  = floatval($_POST['latitude']);
$longitude = floatval($_POST['longitude']);
$range     = intval($_POST['range']);

// If number was not specified, default to 10.
if($number === 0) {
	$number = 10;
}

// Gathering all search terms...
$searchArr = [];

// If there is a username, check if it exists first.
if((isset($username) && strlen($username) > 0)) {
	// First check for the username's existence
	$vars = 'screen_name='.$username;
	$response = $codebirdie->users_lookup($vars);
	$responseArr = (array) $response;
	// If there are errors, just send back to the client the errors.
	if(count($responseArr["errors"])) {
		$errorStr = 'The following errors occurred: ';
		$errorArr = [];
		foreach($responseArr['errors'] as $error) {
			if($error->code === 17) {
				$errorArr[] = 'The inputted username(s) are invalid';
			} else {
				$errorArr[] = $error->message.' ('.$error->code.')';
			}
		}
		$errorStr .= implode(', ', $errorArr);
		echo(json_encode(['errors'=>$errorStr]));
		die();
	}

	// UNIT TEST EXIT POINT
	// Testing for username existence only.
	if($testtype == 'exists') {
		// This is just a true/false that they exist
		$successStr = 'The following usernames exist: ';
		$successArr = [];
		foreach($responseArr as $index => $user) {
			if(is_numeric($index)) {
				$successArr[] = $user->screen_name;
			}
		}
		$successStr .= implode(", ", $successArr);
		echo(json_encode(['successes'=>$successStr]));

		die();
	}

	foreach($responseArr as $index => $user) {
		if(is_numeric($index)) {
			$searchArr[] = '@'.$user->screen_name;
		}
	}
}
// If there is a keyword, add them to the $searchArr too.
if(isset($keyword) && strlen($keyword) > 0) {
	$searchArr[] = $keyword;
}

// If the searchArr is empty, return an error.  
if(count($searchArr) === 0) {
	$response['errors'] = 'Please input a valid username or keyword.';
} elseif((isset($_POST['latitude']) XOR isset($_POST['longitude']))) {
	// Only continue if isset(Latitude) XOR isset(Longitude).  If only one is set, return false.  
	// We have to check the $_POST variable itself, as floatval returns 0 if called on null,
	// and 0 is a valid latitude and longitude.  It's the Equator and the Prime Meridian.
	$response['errors'] = 'Please set both Latitude and Longitude.';
} elseif(isset($_POST['latitude']) && is_numeric($_POST['latitude']) 
	  && isset($_POST['longitude']) && is_numeric($_POST['longitude']) 
	  && $range <= 0) {
	// Only continue if the lat/long is set, if they're valid values, and the range is > 0.  
	// If the lat/long is NOT set, don't bother checking the range.
	$response['errors'] = 'Please set valid range, latitude, and longitude, if searching by location.';
} else {// Otherwise, do the search.
	$searchStr .= implode(' ', $searchArr);
	$searchStr = 'count='.$number.'&q='.urlencode($searchStr);
	// We have already checked to make sure: if Latitude exists, then Longitude and Range will have valid values.
	if(isset($_POST['latitude'])) {
		$searchStr .= '&geocode='.$latitude.','.$longitude.','.$range.'mi';
	}
	$tweetResponse = $codebirdie->search_tweets($searchStr);
	$response = [];
	// $response['full_test'] = $tweetResponse;
	$tweetIdArr = [];
	$response['successes'] = 0;
	// TODO GET max_id from next_results url string. 
	// $response["max_id"] = 
	foreach ($tweetResponse->statuses as $tweet) {
		$tweetIdArr[] = $tweet->id_str;
		$response['successes']++;
	}

	// UNIT TEST EXIT POINT
	// If we just want the ids, return the ids. We can stop here.
	if($testtype == 'tweetIds') {
		$response['successes'] = 'The following Tweet IDs have been found: '.implode(", ", $tweetIdArr);
		echo(json_encode($response));
		die();
	}
	$response['tweets'] = $tweetIdArr;
}

echo(json_encode($response));
die();


 ?>